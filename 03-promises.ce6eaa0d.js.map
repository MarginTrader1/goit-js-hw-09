{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEiBC,SAASC,cAAc,QAE/BC,iBAAiB,UAE1B,SAA+BC,GAC7BA,EAAMC,iBAEN,MAAAC,EAAAC,EAAAC,GAAAP,SAAAQ,qBACgB,SAIVC,EAAQC,OAAOL,EAAUM,OACzBC,EAAOF,OAAOJ,EAASK,OACvBE,EAASH,OAAOH,EAAWI,OAGG,SAA3BG,GAAUC,SAAEA,EAAQC,MAAEA,IAC7BC,EAAAnB,GAASoB,OAAOC,QAAQ,qBAAqBJ,QAAeC,OAC5DI,QAAQC,IAAI,uBAAqBN,QAAiBC,M,CAId,SAA7BM,GAAUP,SAAEA,EAAQC,MAAEA,IAC7BC,EAAAnB,GAASoB,OAAOK,QAAQ,oBAAoBR,QAAeC,OAC3DI,QAAQC,IAAI,sBAAoBN,QAAiBC,M,CAI7B,SAAbQ,EAAcT,EAAUC,GAC/B,MAAMS,EAAgBC,KAAKC,SAAW,GAItC,OAFAP,QAAQC,IAAI,oBAAoBN,gBAAuBC,OAEhD,IAAIY,SAAQ,CAACC,EAASC,KAC3BC,YAAW,IACLN,EACKI,EAAQ,C,SAAEd,E,MAAUC,IAEtBc,EAAO,C,SAAEf,E,MAAUC,KACzBA,EAAM,G,CAIb,IAAK,IAAIgB,EAAI,EAAGA,EAAInB,EAAQmB,IAC1BR,EAAcQ,EAAI,EAAGvB,EAAQG,EAAOoB,GACjCC,MAAK,EAAClB,SAAEA,EAAQC,MAAEA,KAAYF,EAAU,C,SAAEC,E,MAAUC,MACpDkB,OAAM,EAACnB,SAAEA,EAAQC,MAAEA,KAAYM,EAAU,C,SAAEP,E,MAAUC,K","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst formElem = document.querySelector('form');\n\nformElem.addEventListener(`submit`, clickBtnCreatePromise);\n\nfunction clickBtnCreatePromise(event) {\n  event.preventDefault();\n\n  /* получаем массив инпутов и сразу делаем деструктуризацию массива */\n  const [delayElem, stepElem, amountElem] =\n    document.getElementsByTagName('input');\n\n  // присваиваем значение переменным\n  const delay = Number(delayElem.value);\n  const step = Number(stepElem.value);\n  const amount = Number(amountElem.value);\n\n  // функции для успешного выполнения промиса\n  function onSuccess({ position, delay }) {\n    Notiflix.Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n    console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  }\n\n  // функция для неуспешного выполнения промиса\n  function onFailure({ position, delay }) {\n    Notiflix.Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n    console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n  }\n\n  // функция создания промиса\n  function createPromise(position, delay) {\n    const shouldResolve = Math.random() > 0.5;\n\n    console.log(`Creating promise ${position} with delay ${delay}ms`);\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (shouldResolve) {\n          return resolve({ position, delay });\n        }\n        return reject({ position, delay });\n      }, delay);\n    });\n  }\n\n  for (let i = 0; i < amount; i++) {\n    createPromise(i + 1, delay + step * i)\n      .then(({ position, delay }) => onSuccess({ position, delay }))\n      .catch(({ position, delay }) => onFailure({ position, delay }));\n  }\n}\n\n// for (const i of Array(amount).keys()) - тот же метод, только создаем массив и перебивраем его\n"],"names":["$7Y9D8","parcelRequire","document","querySelector","addEventListener","event","preventDefault","delayElem","stepElem","amountElem","getElementsByTagName","delay1","Number","value","step","amount","onSuccess","position","delay","$parcel$interopDefault","Notify","success","console","log","onFailure","failure","createPromise","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","i","then","catch"],"version":3,"file":"03-promises.ce6eaa0d.js.map"}