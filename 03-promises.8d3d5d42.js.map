{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEiBC,SAASC,cAAc,SAE/BC,iBAAiB,UAE1B,SAA+BC,GAC7BA,EAAMC,iBAEN,MAAMC,EAAQC,OAAOH,EAAMI,OAAOC,SAASC,MAAMC,OAC3CC,EAAOL,OAAOH,EAAMI,OAAOC,SAASG,KAAKD,OACzCE,EAASN,OAAOH,EAAMI,OAAOC,SAASI,OAAOF,OASb,SAA7BG,GAAWC,SAAEA,EAAQL,MAAEA,IAC9BM,EAAAjB,GAASkB,OAAOC,QAAQ,oBAAoBH,QAAeL,OAC3DS,QAAQC,IAAI,sBAAoBL,QAAiBL,M,CAI7B,SAAbW,EAAcN,EAAUL,GAE/B,MAAMY,EAAgBC,KAAKC,SAAW,GAItC,OAFAL,QAAQC,IAAI,oBAAoBL,gBAAuBL,OAEhD,IAAIe,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLN,EACFI,EAAQ,C,SAAEX,E,MAAUL,IAEpBiB,EAAO,C,SAAEZ,E,MAAUL,GAAQ,GAE5BA,EAAM,G,CAIb,IAAK,IAAImB,EAAI,EAAGA,EAAIhB,EAAQgB,IAC1BR,EAAcQ,EAAI,EAAGvB,EAAQM,EAAOiB,GACnCC,MAAK,EAACf,SAAEA,EAAQL,MAAEA,KAAYI,EAAU,C,SAAEC,E,MAAUL,MACpDqB,OAAM,EAAChB,SAAEA,EAAQL,MAAEA,KAAYI,EAAU,C,SAAEC,E,MAAUL,K","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst formElem = document.querySelector('.form');\n\nformElem.addEventListener(`submit`, clickBtnCreatePromise);\n\nfunction clickBtnCreatePromise(event) {\n  event.preventDefault();\n\n  const delay = Number(event.target.elements.delay.value);\n  const step = Number(event.target.elements.step.value);\n  const amount = Number(event.target.elements.amount.value);\n\n  // функции для успешного выполнения промиса\n  function onSuccess ({ position, delay }) {\n    Notiflix.Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n    console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  };\n\n  // функция для неуспешного выполнения промиса\n  function onFailure ({ position, delay }) {\n    Notiflix.Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n    console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n  };\n\n  // функция создания промиса \n  function createPromise(position, delay) {\n\n    const shouldResolve = Math.random() > 0.3;\n\n    console.log(`Creating promise ${position} with delay ${delay}ms`);\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (shouldResolve) {\n          resolve({ position, delay });\n        } else {\n          reject({ position, delay });\n        }\n      }, delay);\n    });\n  }\n\n  for (let i = 0; i < amount; i++) {\n    createPromise(i + 1, delay + step * i)\n    .then(({ position, delay }) => onFailure({ position, delay }))\n    .catch(({ position, delay }) => onFailure({ position, delay }))\n  }\n}\n\n\n\n// for (const i of Array(amount).keys()) - тот же метод, только создаем массив и перебивраем его "],"names":["$7Y9D8","parcelRequire","document","querySelector","addEventListener","event","preventDefault","delay1","Number","target","elements","delay","value","step","amount","onFailure","position","$parcel$interopDefault","Notify","failure","console","log","createPromise","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","i","then","catch"],"version":3,"file":"03-promises.8d3d5d42.js.map"}