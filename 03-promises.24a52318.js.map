{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAkCA,SAASC,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GAEtC,OADAC,QAAQC,IAAI,oBAAoBN,gBAAuBC,OAChD,IAAIM,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLR,EACFM,EAAQ,C,SAAER,E,MAAUC,IAEpBQ,EAAO,C,SAAET,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CA1CIU,SAASC,cAAc,SAE/BC,iBAAiB,UAE1B,SAA+BC,GAC7BA,EAAMC,iBAEN,MAAMC,EAAQC,OAAOH,EAAMI,OAAOC,SAASlB,MAAMmB,OAC3CC,EAAOJ,OAAOH,EAAMI,OAAOC,SAASE,KAAKD,OACzCE,EAASL,OAAOH,EAAMI,OAAOC,SAASG,OAAOF,OAG/CG,EAAY,EAACvB,SAAEA,EAAQC,MAAEA,MAC7BuB,EAAA3B,GAAS4B,OAAOC,QAAQ,qBAAqB1B,QAAeC,OAC5DI,QAAQC,IAAI,uBAAqBN,QAAiBC,MAAU,EAIxD0B,EAAY,EAAC3B,SAAEA,EAAQC,MAAEA,MAC7BuB,EAAA3B,GAAS4B,OAAOG,QAAQ,oBAAoB5B,QAAeC,OAC3DI,QAAQC,IAAI,sBAAoBN,QAAiBC,MAAU,EAIzC,IAAf,MAAM4B,KAAKC,MAAMR,GAAQS,OAC5BhC,EAAc8B,EAAI,EAAGb,EAAQK,EAAOQ,GACjCG,MAAK,EAAChC,SAAEA,EAAQC,MAAEA,KAAYsB,EAAU,C,SAAEvB,E,MAAUC,MACpDgC,OAAM,EAACjC,SAAEA,EAAQC,MAAEA,KAAY0B,EAAU,C,SAAE3B,E,MAAUC,K","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst formElem = document.querySelector('.form');\n\nformElem.addEventListener(`submit`, clickBtnCreatePromise);\n\nfunction clickBtnCreatePromise(event) {\n  event.preventDefault();\n\n  const delay = Number(event.target.elements.delay.value);\n  const step = Number(event.target.elements.step.value);\n  const amount = Number(event.target.elements.amount.value);\n\n// функции для успешного выполнения промиса\nconst onSuccess = ({ position, delay }) => {\n  Notiflix.Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n  console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n};\n\n// функция для неуспешного выполнения промиса\nconst onFailure = ({ position, delay }) => {\n  Notiflix.Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n  console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n};\n\n// цикл создания промисов\nfor (const i of Array(amount).keys()) {\n  createPromise(i + 1, delay + step * i)\n    .then(({ position, delay }) => onSuccess({ position, delay }))\n    .catch(({ position, delay }) => onFailure({ position, delay }));\n}}\n\n\n// функция createPromise, принимает position - позиция промиса та delay - задержка перед исполнением промиса.\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  console.log(`Creating promise ${position} with delay ${delay}ms`);\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","console","log","Promise","resolve","reject","setTimeout","document","querySelector","addEventListener","event","preventDefault","delay1","Number","target","elements","value","step","amount","onSuccess","$parcel$interopDefault","Notify","success","onFailure","failure","i","Array","keys","then","catch"],"version":3,"file":"03-promises.24a52318.js.map"}